#!/usr/bin/python
"""Deploys software (or files) from mercurial clones.

See accompanying README.md for details.

(c) 2012, Brad Olson
Hevily derived from Ansible's git module, (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>

This file is part of Ansible

Ansible is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Ansible is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
"""
DOCUMENTATION = '''
---
module: mercurial
author: Brad Olson
short_description: Deploy software (or files) from mercurial checkouts
description:
    - Manage mercurial checkouts of repositories to deploy files or software.
options:
    repo:
        required: true
        description:
            - ssh or http protocol address of the git repository.
    dest:
        required: true
        description:
            - Absolute path of where the repository should be checked out to.
    rev:
        required: false
        default: "default"
        description:
            - What version of the repository to check out.  This can be the
              hg I(SHA), branch name, or a tag name.
    owner:
        required: true
        description:
            - name of the user to own the repository tree, as if this user had run Mercurial
    clean:
        required: false
        default: "yes"
        choices: [ yes, no ]
        description:
            - If yes, any modified files in the working
              repository will be discarded.  (via hg update --clean)
examples:
    - code: "mercurial: repo=ssh://foosball.example.org/path/to/repo dest=/srv/checkout owner=root rev=version1"
      description: Example mercurial checkout from Ansible Playbooks
'''

import os, syslog, subprocess
from os.path import abspath, expanduser, exists, join
import traceback

msg=""

def run( cmd, cwd=None, user=None):
    """Run a command.

    :param str|list cmd: command and arguments
    :param str cwd: if given, change current working directory before running. BUG: doesn't work with su, probably need cd X &&
    :param str user: if given, use 'su' to run the command as another user.
    :return: tuple of command results (exit_code, stdout, stderr)
    """
    if user:
        if cwd:
            cmd = "cd %s && %s" % (cwd,cmd)
            cwd = None
        cmd = "su %s -lc '%s'" % (user, cmd)
    syslog.syslog(syslog.LOG_DEBUG, 'Ansible running %s' % cmd)
    p = subprocess.Popen(cmd, cwd=cwd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    rc = p.returncode
    if  rc != 0:
        log = "Ansible mecurial module failed running %s. Return code: %d. Stdout: '%s'. Stderr: '%s'. CWD: '%s'."
        log %= cmd, rc, out, err, cwd
        syslog.syslog(syslog.LOG_ERR, log)
        raise Exception(log)
    return (rc, out, err)

def get_hg_id(hg, params):
    """
    Check mercurial revision id of current repo
    """
    global msg
    msg = "check hg id of %(dest)s" % params
    cmd = hg + "id --id"
    rc, out, err = run( cmd, cwd=params["dest"], user=params["owner"])
    if rc == 0:
        return out.strip()
    else:
        return None

def ensure_working_copy(params, clean):
    """Clone a mercurial repository if it doesn't exist.
    Pull changes
    Update to desired tag, branch, revision.
    """
    global msg

    hg = "/usr/bin/hg " #mercurial command, probably should check if it's there

    #== Clone new local repository or pull changes to existing.
    msg = "calculating destination path from %(dest)s" % params

    params["dest"] = abspath( expanduser( params["dest"]))
    history = join( params["dest"],".hg")
    msg = "creating destination path %(dest)s" % params
    try:
        os.makedirs(params["dest"])
    except OSError, e:
        if e.errno==17: 
            pass #ignore directory exists errors
        else:
            raise 

    params["options"] = ""
    syslog.syslog(syslog.LOG_DEBUG, "Mercurial  options = %(options)s" % params)
    before = None
    if not exists(history):
        msg = "cloning %(repo)s to %(dest)s" % params
        cmd = hg + "clone %(options)s %(repo)s %(dest)s" % params
        rc, out, err = run(cmd, user=params["owner"])
    else:
        before = get_hg_id(hg, params)
        
        # Assumes paths.default set correctly in repo's .hg/hgrc
        msg = "pulling changes from %(repo)s to %(repo)s" % params
        cmd = hg + "pull %(repo)s %(options)s" % params
        rc, out, err = run( cmd, cwd=params["dest"], user=params["owner"])

    #== Update to revision.
    msg = "updating to revision %(rev)s" % params
    if clean: clean_arg = "-C "
    else:     clean_arg = ""
    rc, out, err = run(hg + "up " + clean_arg  + params["rev"], cwd=params["dest"], user=params["owner"])
    after = get_hg_id(hg, params)

    # default to change unless successful before/after
    same_rev_id = before and after and before == after

    return not same_rev_id

def main():
    global msg

    module = AnsibleModule(
        argument_spec = dict(
            repo = dict( required=True),	    
            dest = dict( required=True),
            owner = dict( required=True),
            rev = dict( default="default"),
            clean=dict(default='yes', choices=['yes', 'no'], aliases=['clean'])
        ),
    )

    params = module.params
    clean = module.boolean(module.params['clean'])

    try:
        changed = ensure_working_copy(params, clean)
        msg = ""
        module.exit_json( dest=params["dest"], changed=changed)
    except StandardError:  #Standard error works in >= 2.4 to skip sys.exit() generated by fail_json and exit_json
        msg = "Error %s" % msg
        syslog.syslog(syslog.LOG_ERR, "Ansible error in mercurial module: " + msg)
        module.fail_json(msg=msg, traceback=traceback.format_exc(), params=params)

# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
